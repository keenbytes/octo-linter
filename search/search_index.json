{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>octo-linter is a tool that validates GitHub Actions workflow and action YAML files.  It checks for syntax errors, such as calling invalid inputs and outputs, and lints for missing descriptions, invalid naming conventions, and other best practice violations, ensuring your workflows are error-free and adhere to GitHub Actions and your company standards.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>The tool was developed during a large-scale refactor of existing GitHub Actions code, which was scattered across multiple repositories with no consistent standards in place.  To streamline the process and reduce manual effort, it made sense to automate many of the checks that would otherwise fall to the reviewer.  Notably, GitHub does not raise errors in several cases \u2014 for example, when referencing a non-existent input, it simply substitutes it with an empty string.  This behaviour can be difficult to detect, particularly when code is being moved or restructured during refactoring. </p>"},{"location":"#demo","title":"Demo","text":"<p>Please navigate to Demo to see example usage.</p>"},{"location":"add_rule/","title":"New rule","text":""},{"location":"add_rule/#requirements","title":"Requirements","text":"<p>To add a new rule, the following items must be implemented:</p> <ul> <li>A rule struct that implements the <code>rule.Rule</code> interface, including methods such as <code>Validate</code> and <code>Lint</code>.</li> <li>The rule struct should be placed in a new or existing rule group. See directories under <code>internal/linter/rule</code>.</li> <li>A default configuration entry must be added to <code>internal/linter/dotgithub.yml</code>.</li> <li>The rule must be linked to its configuration key in the <code>gen.go</code> file.</li> <li>Tests must be written.</li> <li>Documentation must be updated.</li> </ul> <p>See the sections below for more detailed guidance.</p> <p>:warning: A single rule struct can serve multiple configuration keys. Please read the full documentation for details.</p>"},{"location":"add_rule/#rule-group","title":"Rule group","text":"<p>Each rule belongs to a group. In the configuration file, these appear as second-level keys under the <code>rules</code> section \u2014 for example, <code>naming_conventions</code> or <code>required_fields</code>.</p> <p>These groups map to directories under <code>internal/rules</code>. For example: * <code>naming_conventions</code> \u2192 <code>internal/rules/naming</code> * <code>required_fields</code> \u2192 <code>internal/rules/required</code></p> <p>You can place your new rule in an existing group or create a new one.</p>"},{"location":"add_rule/#rule-struct","title":"Rule struct","text":"<p>The simplest way to start is by copying an existing rule and modifying it.</p> <p>Every rule must implement the <code>Rule</code> interface from <code>internal/linter/rule</code>, shown below:</p> <pre><code>type Rule interface {\n    Validate(conf interface{}) error\n    Lint(\n        config interface{},\n        f dotgithub.File,\n        d *dotgithub.DotGithub,\n        chErrors chan&lt;- glitch.Glitch,\n    ) (bool, error)\n    ConfigName(fileType int) string\n    FileType() int\n}\n</code></pre> <ul> <li><code>Validate</code>: Checks if the configuration value is valid.</li> <li><code>Lint</code>: Runs the lint logic against a given file (workflow or action) using the provided configuration.</li> <li><code>ConfigName</code>: Returns the configuration key associated with the rule. The method receives an integer indicating the file type (action or workflow).</li> <li><code>FileType</code>: Returns an integer bitmask indicating which file types this rule applies to.</li> </ul>"},{"location":"add_rule/#filetype-method","title":"FileType method","text":"<p>If the rule applies only to action files:</p> <pre><code>func (r ActionReferencedStepOutputExists) FileType() int {\n    return rule.DotGithubFileTypeAction\n}\n</code></pre> <p>If the rule applies to both action and workflow files:</p> <pre><code>func (r ActionReferencedStepOutputExists) FileType() int {\n    return rule.DotGithubFileTypeAction | rule.DotGithubFileTypeWorkflow\n}\n</code></pre>"},{"location":"add_rule/#configname-method","title":"ConfigName method","text":"<p>This method can vary depending on whether the rule struct handles:</p> <p>A single rule</p> <pre><code>func (r ActionReferencedStepOutputExists) ConfigName(int) string {\n    return \"dependencies__action_referenced_step_output_must_exist\"\n}\n</code></pre> <p>Different keys for different file types</p> <pre><code>func (r ReferencedInputExists) ConfigName(t int) string {\n    switch t {\n    case rule.DotGithubFileTypeWorkflow:\n        return \"dependencies__workflow_referenced_input_must_exists\"\n    case rule.DotGithubFileTypeAction:\n        return \"dependencies__action_referenced_input_must_exists\"\n    default:\n        return \"dependencies__*_referenced_input_must_exists\"\n    }\n}\n</code></pre> <p>Keys based on a custom field</p> <pre><code>func (r Action) ConfigName(int) string {\n    switch r.Field {\n    case ActionFieldAction:\n        return \"required_fields__action_requires\"\n    case ActionFieldInput:\n        return \"required_fields__action_input_requires\"\n    case ActionFieldOutput:\n        return \"required_fields__action_output_requires\"\n    default:\n        return \"required_fields__action_*_requires\"\n    }\n}\n</code></pre>"},{"location":"add_rule/#lint-method","title":"Lint method","text":"<p>To distinguish linting issues from internal errors, use <code>glitch.Glitch</code> instances and send them to the <code>chErrors</code> channel.</p> <p>Use existing rules as a reference. Locate a similar rule in the configuration file (<code>internal/linter/dotgithub.yml</code>) and review its implementation.</p>"},{"location":"add_rule/#validate-method","title":"Validate method","text":"<p>Use existing rules as templates depending on the type and complexity of the configuration value.</p>"},{"location":"add_rule/#configuration-file","title":"Configuration file","text":"<p>Your rule must be added to the default configuration file: <code>internal/linter/dotgithub.yml</code>. This defines default values and enables the rule by default.</p>"},{"location":"add_rule/#link-configuration-key-with-rule-struct","title":"Link configuration key with rule struct","text":"<p>When octo-linter parses the configuration file, it must map each configuration key to a rule struct. This is done using the registry generated in <code>gen.go</code>.</p> <p>Refer back to the three <code>ConfigName</code> method patterns. Below are the corresponding <code>gen.go</code> entries:</p> <p>Single Rule</p> <pre><code>            \"dependencies__action_referenced_step_output_must_exist\": {\n                N: \"dependencies.ActionReferencedStepOutputExists\",\n            },\n</code></pre> <p>Multiple Keys for File Types</p> <pre><code>\n            \"dependencies__action_referenced_input_must_exists\": {\n                N: \"dependencies.ReferencedInputExists\",\n            },\n            // ...\n            \"dependencies__workflow_referenced_input_must_exists\": {\n                N: \"dependencies.ReferencedInputExists\",\n            },\n</code></pre> <p>Rule Struct with Custom Field</p> <pre><code>            \"required_fields__action_requires\": {\n                N: \"required.Action\",\n                F: map[string]string{\"Field\": `required.ActionFieldAction`},\n            },\n            \"required_fields__action_input_requires\": {\n                N: \"required.Action\",\n                F: map[string]string{\"Field\": `required.ActionFieldInput`},\n            },\n            \"required_fields__action_output_requires\": {\n                N: \"required.Action\",\n                F: map[string]string{\"Field\": `required.ActionFieldOutput`},\n            },\n</code></pre>"},{"location":"add_rule/#documentation","title":"Documentation","text":"<p>Once your rule is implemented and tested, don\u2019t forget to document it thoroughly. This ensures others understand its purpose and usage.</p>"},{"location":"building/","title":"Building","text":""},{"location":"building/#binary","title":"Binary","text":"<p>Run the following commands to compile the binary.</p> <pre><code>cd cmd/octo-linter\ngo generate\ngo build -o octo-linter\n</code></pre> <p>Use <code>GOOS</code> and <code>GOARCH</code> environment variables to build binary for a specific platform.  More information can be found in the Go docs.</p>"},{"location":"building/#generator","title":"Generator","text":"<p>Certain <code>*.go</code> files are generated from a template. Search for <code>go:generate</code> directives, and look into (<code>gen.go</code>)[gen.go] to get details.</p>"},{"location":"building/#docker-image","title":"Docker image","text":"<p>To build the docker image, use the following command.</p> <pre><code>docker build -t octo-linter .\n</code></pre> <p>If an image is built on a different platform than <code>linux/amd64</code>, an additional <code>--platform=linux/amd64</code> argument is necessary.  See command reference for <code>docker build</code>.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>octo-linter requires a configuration file that defines compliance rules. This section explains how to create one in more detail.</p>"},{"location":"configuration/#initialise-configuration-file","title":"Initialise configuration file","text":"<p>Use <code>init</code> command that will create a sample configuration file named <code>dotgithub.yml</code> in current directory. Use <code>-d</code> to write it in another place.</p>"},{"location":"configuration/#requirements","title":"Requirements","text":"<p>Let\u2019s consider a GitHub repository that contains workflows and actions within the <code>.github</code> directory. Several  developers are contributing to it, and we want to enforce the following rules for the files in that directory:</p> <ul> <li>Action names must be in a dash-case format</li> <li>Action and workflow files should have a .yml extension</li> <li>Named-value variables should not be enclosed in double quotes</li> <li>The use of the latest runner version should be avoided</li> <li>Actions, along with their inputs and outputs (where applicable), must include both <code>name</code> and <code>description</code> fields</li> <li>Only local actions should be used</li> <li>Environment variable names in steps must be ALL_CAPS</li> </ul> <p>Additionally, it would be useful to automatically verify that all referenced inputs, outputs, and similar entities are properly defined.</p> <p>There are many more possible rules, but we\u2019ll focus on these for the purpose of this example.</p>"},{"location":"configuration/#configuration-file","title":"Configuration file","text":"<p>Tweak the configuration file with rules that the application would use.</p> <p>Based on the list in previous section, the configuration file can look as shown below.</p> <pre><code>version: '3'\nrules:\n  filenames:\n    action_filename_extensions_allowed: ['yml'] # Action files should have a .yml extension\n    action_directory_name_format: dash-case # Action names must be in a dash-case format\n    workflow_filename_extensions_allowed: ['yml'] # Workflow files should have a .yml extension\n    warning_only:\n      - action_directory_name\n      - action_filename_extension\n      - workflow_filename_extension\n\n  naming_conventions:\n    action_step_env_format: ALL_CAPS # Environment variable names in steps must be ALL_CAPS\n\n  action_required_fields: # Actions, along with their inputs and outputs (where applicable), must include both name and description fields\n    action_requires: ['name', 'description']\n    action_input_requires: ['description']\n    action_output_requires: ['description']\n\n  referenced_variables_in_actions:\n    not_in_double_quote: true # Named-value variables should not be enclosed in double quotes\n\n  used_actions_in_action_steps: # Only local actions should be used\n    source: local-only\n\n  used_actions_in_workflow_job_steps:\n    source: local-only\n\n  dependencies: # Verify that all referenced inputs, outputs, and similar entities are properly defined\n    action_referenced_input_must_exists: true \n    action_referenced_step_output_must_exist: true\n    workflow_referenced_input_must_exists: true\n    workflow_referenced_variable_must_exists_in_attached_file: true\n\n  workflow_runners:\n    not_latest: true # The use of the latest runner version should be avoided\n</code></pre>"},{"location":"configuration/#warning-instead-of-an-error","title":"Warning instead of an error","text":"<p>A non-compliant rule can be treated either as an error or a warning. If a rule is intended to trigger only a warning, it should be included in the <code>warning_only</code> list, as shown on above example under the <code>filenames</code> rule group.</p>"},{"location":"configuration/#version-compatibility","title":"Version compatibility","text":"<p>The latest <code>v2</code> version of the application supports only configuration version <code>'3'</code>. Older configuration versions are no longer supported and would  require using the previous <code>v1</code> release of octo-linter.</p> <p>Continue to the next section to learn how to run <code>octo-linter</code> using the prepared configuration.</p>"},{"location":"demo/","title":"Demo","text":""},{"location":"demo/#clone-and-run","title":"Clone and run","text":"<p>An example configuration file and <code>.github</code> directory structure can be found in the <code>example</code> directory of the  repository. Use below commands to see octo-linter in action:</p> <pre><code>git clone https://github.com/keenbytes/octo-linter.git\ncd octo-linter/example\n\ndocker run --platform=linux/amd64 --rm --name octo-linter \\\n  -v $(pwd)/dot-github:/dot-github \\\n  -v $(pwd):/config \\\n  keenbytes/octo-linter:v2.2.0 \\\n  lint -p /dot-github -l WARN -c /config/config.yml\n</code></pre>"},{"location":"demo/#output","title":"Output","text":"<p>This should generate an output similar to the following:</p> <pre><code>time=(...) level=ERROR msg=\"(...)/actions/InvalidActionName/action.yml filenames__action_directory_name_format: directory name must be dash-case\"\ntime=(...) level=ERROR msg=\"(...)/actions/some-action/action.yml dependencies__action_referenced_step_output_must_exist: calls a step 'non-existing-step' output 'output1' but step does not exist\"\ntime=(...) level=ERROR msg=\"(...)/actions/InvalidActionName/action.yml used_actions_in_action_steps__source: step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/actions/InvalidActionName/action.yml used_actions_in_action_steps__source: step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/actions/some-action/action.yml naming_conventions__action_step_env_format: step 2 env 'InvalidEnvName' must be ALL_CAPS\"\ntime=(...) level=ERROR msg=\"(...)/actions/some-action/action.yml dependencies__action_referenced_input_must_exists: calls an input 'non-existing' that does not exist\"\ntime=(...) level=ERROR msg=\"(...)/actions/some-action/action.yml dependencies__action_referenced_input_must_exists: calls an input 'non-existing' that does not exist\"\ntime=(...) level=ERROR msg=\"(...)/actions/some-action/action.yml used_actions_in_action_steps__source: step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/actions/some-action/action.yml referenced_variables_in_actions__not_in_double_quotes: calls a variable 'inputs.non-existing' that is in double quotes\"\ntime=(...) level=ERROR msg=\"(...)/actions/some-action/action.yml used_actions_in_action_steps__source: step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/actions/InvalidActionExtension/action.yaml filenames__action_directory_name_format: directory name must be dash-case\"\ntime=(...) level=ERROR msg=\"(...)/actions/InvalidActionExtension/action.yaml filenames__action_filename_extensions_allowed: file extension must be one of: yml\"\ntime=(...) level=ERROR msg=\"(...)/actions/InvalidActionExtension/action.yaml filenames__action_filename_extensions_allowed: file extension must be one of: yml\"\ntime=(...) level=ERROR msg=\"(...)/actions/InvalidActionExtension/action.yaml used_actions_in_action_steps__source: step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/actions/InvalidActionExtension/action.yaml used_actions_in_action_steps__source: step 1 calls action 'actions/checkout@v4' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml dependencies__workflow_referenced_input_must_exists: calls an input 'non-existing' that does not exist\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml dependencies__workflow_referenced_input_must_exists: calls an input 'non-existing' that does not exist\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml workflow_runners__not_latest: job 'job-2' should not use 'latest' in 'runs-on' field\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml filenames__workflow_filename_extensions_allowed: file extension must be one of: yml\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml filenames__workflow_filename_extensions_allowed: file extension must be one of: yml\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml referenced_variables_in_workflows__not_in_double_quotes: calls a variable 'inputs.non-existing' that is in double quotes\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml used_actions_in_workflow_job_steps__source: job 'job-2' step 3 calls action 'external-action/something@v2' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml used_actions_in_workflow_job_steps__source: job 'job-1' step 1 calls action 'external-action/something@v2' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml used_actions_in_workflow_job_steps__source: job 'job-1' step 7 calls action 'external-action/something@v2' that is not a valid local path\"\ntime=(...) level=ERROR msg=\"(...)/workflows/workflow1.yaml used_actions_in_workflow_job_steps__source: job 'job-2' step 1 calls action 'external-action/something@v2' that is not a valid local path\"\n</code></pre>"},{"location":"demo/#markdown-summary","title":"Markdown summary","text":"<p>octo-linter can generate a simple summary in Markdown format that can be posted as a comment to a pull request.  Create a directory, for example <code>output</code>, and add <code>--output output</code> (<code>-o</code>) flag to the command to generate an <code>output.md</code> file inside of it.</p> <p>Markdown can be limited to print out only certain amount of errors.  This can be set with <code>--output-errors</code> (<code>-u</code>) flag.</p> <p>Please see modified code below:</p> <pre><code>mkdir output\n\ndocker run --platform=linux/amd64 --rm --name octo-linter \\\n  -v $(pwd)/dot-github:/dot-github \\\n  -v $(pwd):/config \\\n  -v $(pwd)/output:/output \\\n  keenbytes/octo-linter:v2.2.0 \\\n  lint -p /dot-github -l WARN -c /config/config.yml -o /output -u 5\n</code></pre>"},{"location":"demo/#screenshot-of-generated-markdown-file","title":"Screenshot of generated Markdown file","text":""},{"location":"demo/#exit-code","title":"Exit code","text":"<p>Tool exits with exit code <code>0</code> when everything is fine.  <code>1</code> when there are errors, <code>2</code> when there are only warnings.  Additionally it may exit with a different code, eg. <code>22</code>.  These numbers indicate another error whilst reading files.</p>"},{"location":"demo/#checking-secrets-and-vars","title":"Checking secrets and vars","text":"<p>octo-linter can scan the code for <code>secrets</code> and <code>variables</code> and compare them with file containing list of defined one.  If there is any <code>secret</code> or <code>var</code> that is not on the list, tool will output info about it.  See below run and its output.</p> <pre><code>docker run --platform=linux/amd64 --rm --name octo-linter \\\n  -v $(pwd)/dot-github:/dot-github \\\n  -v $(pwd):/config \\\n  keenbytes/octo-linter:v2.2.0 \\\n  lint -p /dot-github -l WARN -c /config/config.yml \\\n  -s /config/secrets_list.txt \\\n  -z /config/vars_list.txt \\\n  2&gt;&amp;1 | grep NON_EXISTING_ONE\ntime=2025-06-08T22:09:18.788Z level=ERROR msg=\"workflow_called_variable_exists_in_file: workflow 'workflow1.yaml' calls a variable 'NON_EXISTING_ONE' that does not exist in the vars file\"\ntime=2025-06-08T22:09:18.789Z level=ERROR msg=\"workflow_called_variable_exists_in_file: workflow 'workflow1.yaml' calls a secret 'NON_EXISTING_ONE' that does not exist in the secrets file\"\n</code></pre>"},{"location":"github-actions-workflow/","title":"GitHub Actions Workflow","text":"<p>Below is an example of a workflow that uses octo-linter docker to check files in <code>.github</code>.</p> <pre><code>---\nname: GitHub Actions YAML linter\n\non:\n  pull_request:\n    paths:\n      - '.github/**.yml'\n      - '.github/**.yaml'\n\njobs:\n  main:\n    name: Lint\n    runs-on: ubuntu-24.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run octo-linter\n        run: |\n          # we assume that the dotgithub.yml file \n          # is present in .github directory\n          docker run --rm --name octo-linter \\\n            -v $(pwd)/.github:/dot-github \\\n            keenbytes/octo-linter:v2.2.0 \\\n            lint -p /dot-github -l WARN\n</code></pre>"},{"location":"running-locally/","title":"Running locally","text":""},{"location":"running-locally/#syntax","title":"Syntax","text":"<p>Check below help message for <code>lint</code> command:</p> <pre><code>Usage:  octo-linter lint [FLAGS]\n\nRuns the linter on files from a specific directory\n\nRequired flags: \n  -p,    --path DIR       Path to .github directory\n\nOptional flags: \n  -c,    --config FILE    Linter config with rules in YAML format\n  -l,    --loglevel       One of NONE,ERR,WARN,DEBUG\n  -s,    --secrets-file   Check if secret names exist in this file (one per line)\n  -z,    --vars-file      Check if variable names exist in this file (one per line)\n</code></pre> <p>Use <code>-p</code> argument to point to <code>.github</code> directories.  The tool will search for any actions in the <code>actions</code> directory, where each action is in its own sub-directory and its filename is either <code>action.yaml</code> or <code>action.yml</code>.  And, it will search for workflows' <code>*.yml</code> and <code>*.yaml</code> files in <code>workflows</code> directory.</p> <p>Additionally, all the variable names (meaning <code>${{ var.NAME }}</code>) as well as secrets (<code>${{ secret.NAME }}</code>) in the workflow can be checked against a list of possible names.  Use <code>-z</code> and <code>-s</code> arguments with paths to files containing a list of possible variable or secret names, with names being separated by new line or space.  Check Demo for a sample usage.</p>"},{"location":"running-locally/#download","title":"Download","text":"<p>If not compiled, binary can be download from repository releases.</p>"},{"location":"running-locally/#using-binary","title":"Using binary","text":"<p>Tweak below command with a path pointing to <code>.github</code> and configuration file:</p> <pre><code>./octo-linter lint -p /path/to/.github -l WARN -c config.yaml\n</code></pre>"},{"location":"running-locally/#using-docker-image","title":"Using docker image","text":"<pre><code>docker run --rm --name octo-linter \\\n  -v /path/to/.github:/dot-github -v $(pwd):/config \\\n  keenbytes/octo-linter:v2.2.0 \\\n  lint -p /dot-github -l WARN -c /config/config.yml\n</code></pre>"},{"location":"running-locally/#checking-secrets-and-vars","title":"Checking secrets and vars","text":"<p>Check Demo page to see an example with checking called <code>secrets</code> and <code>vars</code>.</p>"},{"location":"rules/dependencies/","title":"dependencies","text":"<p>Group of rules checking various dependencies between action steps, workflow jobs etc.</p>"},{"location":"rules/dependencies/#rules","title":"Rules","text":"<pre><code>version: '3'\nrules:\n  dependencies:\n    workflow_needs_field_must_contain_already_existing_jobs: true\n    action_referenced_input_must_exists: true\n    action_referenced_step_output_must_exist: true\n    workflow_referenced_input_must_exists: true\n    workflow_referenced_variable_must_exists_in_attached_file: true\n</code></pre> Rule Description Value workflow_needs_field_must_contain_already_existing_jobs Checks if <code>needs</code> field references existing jobs. <code>bool</code> action_referenced_input_must_exists Scans the action code for all input references and verifies that each has been previously defined. During action execution, if a reference to an undefined input is found, it is replaced with an empty string. <code>bool</code> action_referenced_step_output_must_exist Checks whether references to step outputs correspond to outputs defined in preceding steps. During execution, referencing a non-existent step output results in an empty string. <code>bool</code> workflow_referenced_input_must_exists Scans the code for all input references and verifies that each has been previously defined. During execution, if a reference to an undefined input is found, it is replaced with an empty string. <code>bool</code> workflow_referenced_variable_must_exists_in_attached_file Checks if called variables and secrets exist. This rule requires a list of variables and secrets to be checked against. <code>bool</code>"},{"location":"rules/filenames/","title":"filenames","text":"<p>Group of rules related to action and workflow filenames.</p>"},{"location":"rules/filenames/#rules","title":"Rules","text":"<pre><code>version: '3'\nrules:\n  filenames:\n    action_filename_extensions_allowed: ['yml']\n    action_directory_name_format: dash-case\n    workflow_filename_extensions_allowed: ['yml']\n    workflow_filename_base_format: dash-case;underscore-prefix-allowed\n</code></pre> Rule Description Value action_filename_extensions_allowed Action filename extension must be one of the specified, eg. <code>yml</code> or <code>yaml</code>. <code>[]string</code> action_directory_name_format Action directory name adheres to the selected naming convention. One of Available Formats workflow_filename_extensions_allowed Workflow file extension must be one of specified values, eg. <code>yml</code> or <code>yaml</code>. <code>[]string</code> workflow_filename_base_format Workflow file basename (without extension) adheres to the selected naming convention. One of Available Formats"},{"location":"rules/filenames/#available-formats","title":"Available Formats","text":"<p>Below naming convention formats are available:</p> <ul> <li><code>dash-case</code></li> <li><code>dash-case;underscore-prefix-allowed</code></li> <li><code>camelCase</code></li> <li><code>PascalCase</code></li> <li><code>snake_case</code></li> <li><code>ALL_CAPS</code></li> </ul> <p>In case of <code>dash-case;underscore-prefix-allowed</code> filename is allowed to have an underscore (<code>_</code>) character in the beginning. In some places it is used to distinguish sub-workflows.</p>"},{"location":"rules/naming_conventions/","title":"naming_conventions","text":"<p>Group of rules related to naming convention of action and workflow fields which check if they are in specific format.</p>"},{"location":"rules/naming_conventions/#rules","title":"Rules","text":"<pre><code>version: '3'\nrules:\n  naming_conventions:\n    action_input_name_format: dash-case\n    action_output_name_format: dash-case\n    action_referenced_variable_format: ALL_CAPS\n    action_step_env_format: ALL_CAPS\n    workflow_env_format: ALL_CAPS\n    workflow_job_env_format: ALL_CAPS\n    workflow_job_step_env_format: ALL_CAPS\n    workflow_referenced_variable_format: ALL_CAPS\n    workflow_dispatch_input_name_format: dash-case\n    workflow_call_input_name_format: dash-case\n    workflow_job_name_format: dash-case\n    workflow_single_job_only_name: main\n</code></pre> Rule Description Value action_input_name_format Action input name. One of Available Formats action_output_name_format Action output name. One of Available Formats action_referenced_variable_format Referenced variables such as <code>env</code>, <code>var</code>, and <code>secret</code>. One of Available Formats action_step_env_format Step environment variable names. One of Available Formats workflow_env_format Workflow environment variable names. One of Available Formats workflow_job_env_format Workflow job environment variable names. One of Available Formats workflow_job_step_env_format Workflow job step environment variable names. One of Available Formats workflow_referenced_variable_format Referenced variables in a workflow such as 'env', 'var', and 'secret'. One of Available Formats workflow_dispatch_input_name_format <code>workflow_dispatch</code> block input name. One of Available Formats workflow_call_input_name_format <code>workflow_call</code> block input name. One of Available Formats workflow_job_name_format Checks job name. One of Available Formats workflow_single_job_only_name If workflow has only one job, this should be its name. <code>string</code>"},{"location":"rules/naming_conventions/#available-formats","title":"Available Formats","text":"<p>Below naming convention formats are available:</p> <ul> <li><code>dash-case</code></li> <li><code>camelCase</code></li> <li><code>PascalCase</code></li> <li><code>snake_case</code></li> <li><code>ALL_CAPS</code></li> </ul>"},{"location":"rules/referenced_variables/","title":"referenced_variables_*","text":"<p>Groups of rules checking variables referenced in action or workflow steps, eg. <code>${{ var }}</code>.</p>"},{"location":"rules/referenced_variables/#rules","title":"Rules","text":"<pre><code>version: '3'\nrules:\n  referenced_variables_in_actions:\n    not_one_word: true\n    not_in_double_quotes: true\n\n  referenced_variables_in_workflows:\n    not_one_word: true\n    not_in_double_quotes: true\n</code></pre> Rule Description Value not_one_word Checks for variable references that are single-word or single-level, e.g. <code>${{ something }}</code> instead of <code>${{ inputs.something }}</code>. Only the values <code>true</code> and <code>false</code> are permitted in this form; all other variables are considered invalid. <code>bool</code> not_in_double_quotes Scans for all variable references enclosed in double quotes. It is safer to use single quotes, as double quotes expand certain characters and may allow the execution of sub-commands. <code>bool</code>"},{"location":"rules/required_fields/","title":"required_fields","text":"<p>Group of rules checking if required fields within actions and workflows are defined.</p>"},{"location":"rules/required_fields/#rules","title":"Rules","text":"<pre><code>version: '3'\nrules:\n  required_fields:\n    action_requires: ['name', 'description']\n    action_input_requires: ['description']\n    action_output_requires: ['description']\n    workflow_requires: ['name']\n    workflow_dispatch_input_requires: ['description']\n    workflow_call_input_requires: ['description']\n    workflow_requires_uses_or_runs_on: true\n</code></pre> Rule Description Value action_requires Fields in the root of the action. <code>[]string</code> action_input_requires Fields in action inputs. <code>[]string</code> action_output_requires Fields in action outputs. <code>[]string</code> workflow_requires Fields in the root of workflow. <code>[]string</code> workflow_dispatch_input_requires <code>workflow_dispatch</code> inputs fields. <code>[]string</code> workflow_call_input_requires <code>workflow_call</code> input fields. <code>[]string</code> workflow_requires_uses_or_runs_on Checks if workflow has <code>runs-on</code> or <code>uses</code> field. At least of them must be defined. <code>bool</code>"},{"location":"rules/used_actions/","title":"used_actions_*","text":"<p>Groups of rules checking paths of actions used in steps.</p>"},{"location":"rules/used_actions/#rules","title":"Rules","text":"<pre><code>version: '3'\nrules:\n  used_actions_in_action_steps:\n    source: local-or-external\n    must_exist: ['local', 'external']\n    must_have_valid_inputs: true\n\n  used_actions_in_workflow_job_steps:\n    source: local-or-external\n    must_exist: ['local', 'external']\n    must_have_valid_inputs: true\n</code></pre> Rule Description Value source Referenced action (in <code>uses</code>) in steps must have valid path. This rule can be configured to allow local actions, external actions, or both. One of Allowed Scopes must_exist Verifies that the action referenced in a step actually exists. It can be configured to allow only local actions (within the same repository), external actions, or both. <code>[]string</code> that contains <code>local</code> and/or <code>external</code> must_have_valid_inputs Verifies that all required inputs are provided when referencing an action in a step, and that no undefined inputs are used. <code>bool</code>"},{"location":"rules/used_actions/#allowed-sources","title":"Allowed Sources","text":"<p>Below is the list of possible values for the allowed action source:</p> <ul> <li><code>local-or-external</code></li> <li><code>local</code></li> <li><code>external</code></li> </ul>"},{"location":"rules/workflow_runners/","title":"workflow_runners","text":"<p>Group of rules checking various things related to runner.</p>"},{"location":"rules/workflow_runners/#rules","title":"Rules","text":"<pre><code>version: '3'\nrules:\n  workflow_runner:\n    not_latest: true\n</code></pre> Rule Description not_latest Checks whether 'runs-on' does not contain the 'latest' string. In some case, runner version (image) should be frozen, instead of using the latest."}]}